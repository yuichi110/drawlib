name: unit test
run-name: version=${{ github.event.inputs.lib_version }}, from=${{ github.event.inputs.install_from }}, os=${{ github.event.inputs.os }}, python=${{ github.event.inputs.python_version }}, branch=${{ github.event.inputs.branch }}

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'OS'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
          
      python_version:
        description: 'Python version'
        required: true
        default: '3.9'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          
      install_from:
        description: 'Where you get the lib'
        required: true
        default: 'github'
        type: choice
        options:
          - 'github'
          - 'pypi'
          - 'testpypi'
          
      branch:
        description: 'Branch to run tests on'
        required: true
        default: 'main'
        type: string
        
      lib_version:
        description: 'Lib version. Ignored when you get it from github'
        required: true
        default: 'latest'
        type: string
        

jobs:
  build:

    runs-on: ${{ github.event.inputs.os }}

    steps:
    - name: Display Inputs
      shell: bash
      run: |
        echo "Running on OS: ${{ github.event.inputs.os }}"
        echo "Python version: ${{ github.event.inputs.python_version }}"
        echo "Installing from: ${{ github.event.inputs.install_from }}"
        echo "Library version: ${{ github.event.inputs.lib_version }}"
        echo "Branch: ${{ github.event.inputs.branch }}"
        
    - name: Check out repository code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ github.event.inputs.python_version }}

    - name: Install dependencies
      shell: bash
      run: |

        if [ "${{ github.event.inputs.install_from }}" == "github" ]; then
            echo '# curl -sSL https://install.python-poetry.org | python -'
            curl -sSL https://install.python-poetry.org | python -
            
            if [ "${{ github.event.inputs.os }}" == "ubuntu-latest" ]; then
                echo '/home/runner/.local/bin/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes'
                /home/runner/.local/bin/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes
                
            elif [ "${{ github.event.inputs.os }}" == "windows-latest" ]; then
                echo '# C:/Users/runneradmin/AppData/Roaming/Python/Scripts/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes'
                C:/Users/runneradmin/AppData/Roaming/Python/Scripts/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes
                
            elif [ "${{ github.event.inputs.os }}" == "macos-latest" ]; then
                echo '/Users/runner/.local/bin/poetry self add poetry-plugin-export'
                /Users/runner/.local/bin/poetry self add poetry-plugin-export
                echo '/Users/runner/.local/bin/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes'
                /Users/runner/.local/bin/poetry export --dev -f requirements.txt --output requirements.txt --without-hashes
                
            else
                echo OS is not supported: "${{ github.event.inputs.install_from }}"
                exit 1
            fi

            echo '# pip install -r requirements.txt'
            pip install -r requirements.txt

        else
            echo '# rm -rf ./drawlib'
            rm -rf ./drawlib
            
            echo '# pip install pytest pytest-cov'
            pip install pytest pytest-cov
          
            if [ "${{ github.event.inputs.install_from }}" == "pypi" ]; then
                if [ "${{ github.event.inputs.lib_version }}" == "latest" ]; then
                    echo '# pip install drawlib'
                    pip install drawlib
                    
                else
                    echo '# pip install drawlib=="${{ github.event.inputs.lib_version }}"'
                    pip install drawlib=="${{ github.event.inputs.lib_version }}"
                fi
            
            elif [ "${{ github.event.inputs.install_from }}" == "testpypi" ]; then
                if [ "${{ github.event.inputs.lib_version }}" == "latest" ]; then
                    echo '# pip install --index-url https://test.pypi.org/simple/ drawlib'
                    pip install --index-url https://test.pypi.org/simple/ drawlib
                    
                else
                    echo '# pip install --index-url https://test.pypi.org/simple/ drawlib=="${{ github.event.inputs.lib_version }}"'
                    pip install --index-url https://test.pypi.org/simple/ drawlib=="${{ github.event.inputs.lib_version }}"
                fi
                
            else
                echo install_from is not supported: "${{ github.event.inputs.install_from }}"
                exit 1
            fi
        fi

    - name: Run tests
      shell: bash
      run: |
        echo '# pytest -s --cov=drawlib tests/'
        pytest -s --cov=drawlib tests/
      
