"""
This type stub file was generated by pyright.
"""

from typing import List, Literal
from drawlib.v0_1.private.util import error_handler

"""Implementation of drawlib command."""
def call() -> None:
    """Handle drawlib command execution.

    This function serves as the entry point for executing drawlib commands.
    It parses command-line arguments, processes options like showing version info
    or purging font cache, sets logging levels, retrieves target files and directories,
    and executes each target file using the DrawlibExecuter.

    Raises:
        ValueError: If an invalid logging mode is specified.
    """
    ...

class DrawlibArgParser:
    """Command-line argument parser for drawlib.

    Parses command-line options related to drawlib execution, such as target files,
    version display, font cache purging, logging modes, and execution modes.
    """
    def __init__(self) -> None:
        """
        Initializes a DrawlibArgParser instance.

        In this method, an ArgumentParser instance is created to define command line options
        for drawlib execution related parameters such as target files, version display, font cache purging,
        logging modes, and execution modes.

        Returns:
            None
        """
        ...
    
    def parse(self) -> None:
        """Parse command line options.

        Parses command line options using the ArgumentParser instance.
        It separates special options from main positional arguments and stores them internally.

        This method must be called before calling any other methods that retrieve parsed options.

        Returns:
            None
        """
        ...
    
    def is_show_version(self) -> bool:
        """Check if the version option is specified.

        Checks whether the command line options include `-v` or `--version`.
        If either option is present, it returns True; otherwise, False.

        Returns:
            bool: True if version option is specified, False otherwise.

        """
        ...
    
    def is_purge_font_cache(self) -> bool:
        """Check if the purge font cache option is specified.

        Checks whether the command line options include `--purge_font_cache`.
        If the option is present, it returns True; otherwise, False.

        Returns:
            bool: True if purge font cache option is specified, False otherwise.

        """
        ...
    
    def get_logging_mode(self) -> Literal["quiet", "normal", "verbose", "developer"]:
        """Retrieve the logging mode based on command line options.

        Checks the command line options for logging-related flags:
        - `--quiet`: Returns "quiet" logging mode.
        - `--verbose` or `--debug`: Returns "verbose" logging mode.
        - `--developer`: Returns "developer" logging mode.

        Raises:
            ValueError: If conflicting logging options are specified.

        Returns:
            Literal["quiet", "normal", "verbose", "developer"]: Logging mode.
        """
        ...
    
    def get_exec_mode(self) -> Literal["none", "auto_clear", "auto_initialize"]:
        """Retrieve the execution mode based on command line options.

        Checks the command line options for execution mode flags:
        - `--disable_auto_clear`: Returns "none" execution mode.
        - `--enable_auto_initialize`: Returns "auto_initialize" execution mode.

        Returns:
            Literal["none", "auto_clear", "auto_initialize"]: Execution mode.
        """
        ...
    
    def get_target_files(self) -> List[str]:
        """Retrieve positional arguments representing target files and directories.

        Retrieves the positional arguments passed to the drawlib command,
        which are intended as target files or directories for execution.

        Returns:
            List[str]: List of positional arguments (files and directories).
        """
        ...
    


class DrawlibExecuter:
    """Executor for running Python files or directories containing drawing code.

    Executes Python files specified as targets or recursively runs all Python files
    within a specified directory. Handles logging, module loading, and error handling.
    """
    def __init__(self, mode: Literal["none", "auto_clear", "auto_initialize"]) -> None:
        """Initializes a DrawlibExecuter instance with the specified mode.

        Args:
            mode (Literal["none", "auto_clear", "auto_initialize"]):
                The execution mode for handling Python file execution:
                - "none": Executes Python files without clearing canvas between executions.
                - "auto_clear": Automatically clears the canvas between executing each Python file.
                - "auto_initialize": Automatically initializes theme/canvas/image_cache per execution.

                Raises ValueError if mode is not one of ["none", "auto_clear", "auto_initialize"].

        Raises:
            ValueError: If mode is not one of ["none", "auto_clear", "auto_initialize"].
        """
        ...
    
    @error_handler
    def execute(self, file_or_directory: str) -> None:
        """Execute the specified Python file or all Python files in the specified directory.

        Executes the Python file specified by `file_or_directory` or recursively executes all Python files
        found within the specified directory. Each Python file is executed only once.

        For directories, strongly recommend setting `auto_clear=True` to avoid shared canvas state
        between different Python files.

        Args:
            file_or_directory (str): Path to the Python file or directory containing Python files to execute.

        Returns:
            None

        Raises:
            ValueError: If the specified path `file_or_directory` does not exist.

        """
        ...
    


