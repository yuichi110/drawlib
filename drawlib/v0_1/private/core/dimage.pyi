"""
This type stub file was generated by pyright.
"""

from typing import List, Tuple, Union
from PIL import Image
from drawlib.v0_1.private.util import error_handler

"""Class Dimage implementation module."""
list_ = list
class DimageCache:
    """A class for managing a cache of Dimage objects."""
    def __init__(self) -> None:
        """Initialize an empty Dimage cache."""
        ...
    
    def has(self, name: str) -> bool:
        """Check whether a Dimage cache with the given name exists.

        Args:
            name (str): The name of the cache.

        Returns:
            bool: True if the cache exists, False otherwise.
        """
        ...
    
    def set(self, name: str, image: Union[str, Dimage, Image.Image]) -> None:
        """Set a copied Dimage cache with the provided name key.

        This method creates a copy of the original object and sets the copied one in the cache.
        It means you can modify the original object after caching without affecting the cached object.

        Args:
            name (str): The key under which to cache the Dimage.
            image (Union[str, Dimage, Image.Image]): The image to cache, either as a file path,
                a Dimage object, or a PIL Image.

        Returns:
            None
        """
        ...
    
    def list(self) -> List[str]:
        """List all cached Dimage names.

        Returns:
            list[str]: A list of all cached Dimage names.
        """
        ...
    
    def get(self, name: str) -> Dimage:
        """Get a copied Dimage cache by name (key).

        This method returns a copy of the cached Dimage object, allowing modifications
        without affecting the original cached object.

        Args:
            name (str): The key of the cached Dimage to retrieve.

        Returns:
            Dimage: A copy of the original cached Dimage object.

        Raises:
            ValueError: If the specified Dimage cache does not exist.
        """
        ...
    
    def delete(self, name: str) -> None:
        """Delete a Dimage cache if it exists.

        Args:
            name (str): The key of the Dimage cache to delete.

        Returns:
            None
        """
        ...
    


class Dimage:
    """A wrapper class for handling images with easy methods for reading, writing, and applying effects.

    This class provides simple methods for reading, writing, and applying effects to images.
    It serves as a wrapper for `PIL.Image.Image`, allowing users to get and set PIL images
    from this class. For advanced effects, users should directly use the PIL Image class.

    Attributes:
        cache (DimageCache): A cache for storing Dimage objects.
    """
    cache = ...
    @error_handler
    def __init__(self, image: Union[str, Dimage, Image.Image], copy: bool = ...) -> None:
        """Initialize a Dimage instance from a file path, PIL Image, or another Dimage.

        This constructor initializes a Dimage instance from a given image source.
        The source can be a file path, a PIL Image, or another Dimage. If `copy` is
        True, a copy of the image is made; otherwise, the original image is used.

        Args:
            image (str | Dimage | Image.Image): The source image to initialize the Dimage.
            copy (bool, optional): If True, a copy of the image is made. Defaults to False.

        Raises:
            FileNotFoundError: If the file path does not exist.
            ValueError: If the image type is not supported.

        Note:
            The file path is relative to the user code which calls this constructor,
            not relative to where you call Python (default path behavior). If you
            want to use the normal path behavior, convert the relative path to an
            absolute path before passing it to this class.
        """
        ...
    
    @error_handler
    def get_pil_image(self) -> Image.Image:
        """Get a copied PIL Image.

        This method returns a copy of the PIL Image held by the Dimage instance.
        Modifications to the returned PIL Image do not affect the original Dimage.

        Returns:
            PIL.Image.Image: A copy of the PIL Image.
        """
        ...
    
    @error_handler
    def get_image_size(self) -> Tuple[int, int]:
        """Get the size of the image.

        This method returns the width and height of the image as a tuple.

        Returns:
            tuple[int, int]: A tuple containing the width and height of the image.
        """
        ...
    
    @error_handler
    def copy(self) -> Dimage:
        """Get a copied Dimage.

        This method creates and returns another Dimage instance with the same content.

        Returns:
            Dimage: A deep copied Dimage instance.
        """
        ...
    
    @error_handler
    def save(self, file: str) -> None:
        """Save the Dimage data to a file.

        This method saves the image to the specified file path. The path is
        relative to the script file which calls this method.

        Args:
            file (str): The file path to save the image. This path is relative to the user script file.

        Raises:
            ValueError: If the file argument is not a string.

        Returns:
            None
        """
        ...
    
    @error_handler
    def resize(self, width: int, height: int) -> Dimage:
        """Get a new Dimage that is resized. The original Dimage is kept unchanged.

        This method returns a new Dimage that is resized to the specified width and height.

        Args:
            width (int): The new width of the image.
            height (int): The new height of the image.

        Returns:
            Dimage: A new resized image.
        """
        ...
    
    @error_handler
    def crop(self, x: int, y: int, width: int, height: int) -> Dimage:
        """Get a new Dimage that is cropped. The original Dimage is kept unchanged.

        This method returns a new Dimage that is cropped to the specified dimensions.
        Note that the origin (0, 0) is at the left bottom for this method.

        Args:
            x (int): The x-coordinate of the top-left corner of the cropping box.
            y (int): The y-coordinate of the top-left corner of the cropping box.
            width (int): The width of the cropping box.
            height (int): The height of the cropping box.

        Returns:
            Dimage: A new cropped image.
        """
        ...
    
    @error_handler
    def flip(self) -> Dimage:
        """Get a new Dimage that is flipped vertically. The original Dimage is kept unchanged.

        Returns:
            Dimage: A new vertically flipped image.
        """
        ...
    
    @error_handler
    def mirror(self) -> Dimage:
        """Get a new Dimage that is mirrored horizontally. The original Dimage is kept unchanged.

        Returns:
            Dimage: A new horizontally mirrored image.
        """
        ...
    
    @error_handler
    def fill(self, color: Union[Tuple[int, int, int], Tuple[int, int, int, float]]) -> Dimage:
        """Get a new Dimage with the specified color filling the transparent areas.

        Args:
            color (Union[Tuple[int, int, int], Tuple[int, int, int, float]]):
                   The color to fill the transparent areas with. It can be an RGB or RGBA tuple.

        Returns:
            Dimage: A new image with the transparent areas filled with the specified color.
        """
        ...
    
    @error_handler
    def alpha(self, alpha: float) -> Dimage:
        """Get a new Dimage with the specified alpha transparency while keeping the original Dimage unchanged.

        This method returns a new Dimage with modified alpha transparency.
        It keeps original transparency if it is lower than provided value.

        Args:
            alpha (float): The alpha value to apply to the image,
            where 0.0 is fully transparent and 1.0 is fully opaque.

        Returns:
            Dimage: A new Dimage with the specified alpha transparency.
        """
        ...
    
    @error_handler
    def invert(self) -> Dimage:
        """Get a new Dimage with inverted colors while keeping the original Dimage unchanged.

        Returns:
            Dimage: A new Dimage with inverted colors.
        """
        ...
    
    @error_handler
    def grayscale(self) -> Dimage:
        """Get a new Dimage with a grayscale effect while keeping the original Dimage unchanged.

        Returns:
            Dimage: A new Dimage with a grayscale effect.
        """
        ...
    
    @error_handler
    def brightness(self, brightness: float = ...) -> Dimage:
        """Get a new Dimage with changed brightness while keeping the original Dimage unchanged.

        Args:
            brightness (float): The factor by which to change the brightness. A factor of 1.0 means no change,
                                less than 1.0 means darker, and greater than 1.0 means brighter.

        Returns:
            Dimage: A new Dimage with changed brightness.
        """
        ...
    
    @error_handler
    def sepia(self) -> Dimage:
        """Get a new Dimage with a sepia effect while keeping the original Dimage unchanged.

        Returns:
            Dimage: A new Dimage with a sepia effect.
        """
        ...
    
    @error_handler
    def colorize(self, from_black_to: Union[Tuple[int, int, int], Tuple[int, int, int, float]], from_white_to: Union[Tuple[int, int, int], Tuple[int, int, int, float]], from_mid_to: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...) -> Dimage:
        """Get a new Dimage with a colorize effect while keeping the original Dimage unchanged.

        Args:
            from_black_to (Union[Tuple[int, int, int], Tuple[int, int, int, float]]):
                    The color to map black to.
            from_white_to (Union[Tuple[int, int, int], Tuple[int, int, int, float]]):
                    The color to map white to.
            from_mid_to (Union[Tuple[int, int, int], Tuple[int, int, int, float], None]):
                    The color to map mid-tone to. If None, mid-tones are mapped automatically.

        Returns:
            Dimage: A new Dimage with a colorize effect.

        """
        ...
    
    @error_handler
    def posterize(self, num_colors: int = ...) -> Dimage:
        """Get a new Dimage with a posterize effect while keeping the original Dimage unchanged.

        Args:
            num_colors (int): The number of colors to use in the posterized image. Lower values mean fewer colors.

        Returns:
            Dimage: A new Dimage with a posterize effect.
        """
        ...
    
    @error_handler
    def mosaic(self, block_size: int = ...) -> Dimage:
        """Get a new Dimage with a mosaic effect while keeping the original Dimage unchanged.

        Args:
            block_size (int): The size of the mosaic blocks. Larger values mean larger mosaic blocks.

        Returns:
            Dimage: A new Dimage with a mosaic effect.
        """
        ...
    
    @error_handler
    def blur(self) -> Dimage:
        """Get a new Dimage with a blur effect while keeping the original Dimage unchanged.

        Returns:
            Dimage: A new Dimage with a blur effect.
        """
        ...
    
    @error_handler
    def line_extraction(self) -> Dimage:
        """Get a new Dimage with a line extraction effect while keeping the original Dimage unchanged.

        Returns:
            Dimage: A new Dimage with a line extraction effect.
        """
        ...
    
    @error_handler
    def remove_margin(self, margin_color: Union[None, str, Tuple[int, int, int]]) -> Dimage:
        """Get a new Dimage with the margins removed while keeping the original Dimage unchanged.

        Args:
            margin_color (Union[None, str, Tuple[int, int, int]]):
                    The color of the margin to remove. If None, removes transparent margins.

        Returns:
            Dimage: A new Dimage with the margins removed.

        """
        ...
    


