"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import List, Literal, Optional, Tuple, Union
from drawlib.v0_1.private.core.fonts import Font, FontArabic, FontBase, FontChinese, FontFile, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSansSerif, FontSerif, FontSourceCode
from drawlib.v0_1.private.util import error_handler

"""Style models implementation module."""
@dataclasses.dataclass
class IconStyle:
    """Represents the styling attributes for icons in drawlib.

    This dataclass encapsulates various style attributes that can be applied to icons,
    including their visual style, color, transparency (alpha), horizontal alignment,
    and vertical alignment.

    Attributes:
        style (Optional[Literal['thin', 'light', 'regular', 'bold', 'fill']], optional):
            The visual style of the icon. Can be one of: 'thin', 'light', 'regular',
            'bold', or 'fill'.
        color (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the icon in RGB or RGBA format. If None, apply theme default.
        alpha (Optional[float], optional):
            The transparency of the icon, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque).
        halign (Optional[Literal['left', 'center', 'right']], optional):
            The horizontal alignment of the icon within its bounding box. Can be one of:
            'left', 'center', or 'right'.
        valign (Optional[Literal['bottom', 'center', 'top']], optional):
            The vertical alignment of the icon within its bounding box. Can be one of:
            'bottom', 'center', or 'top'.

    Methods:
        copy(self) -> IconStyle:
            Creates and returns a deep copy of the IconStyle object.
    """
    style: Optional[Literal["thin", "light", "regular", "bold", "fill"]] = ...
    color: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    alpha: Optional[float] = ...
    halign: Optional[Literal["left", "center", "right"]] = ...
    valign: Optional[Literal["bottom", "center", "top"]] = ...
    @error_handler
    def copy(self) -> IconStyle:
        """Create and return a deep copy of the IconStyle object."""
        ...
    
    @error_handler
    def merge(self, style: IconStyle) -> IconStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (IconStyle): The primary style to be merged with this object's style.

        Returns:
            IconStyle: A new `IconStyle` instance with merged attributes.

        Example:
            primary_style = IconStyle(style='solid', color='blue')
            secondary_style = IconStyle(style='dotted', color=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have style='solid', color='blue', alpha=0.5
        """
        ...
    
    @property
    @error_handler
    def style(self) -> Optional[Literal["thin", "light", "regular", "bold", "fill"]]:
        """Getter of style"""
        ...
    
    @style.setter
    @error_handler
    def style(self, value: Optional[Literal["thin", "light", "regular", "bold", "fill"]]) -> None:
        """Setter of style"""
        ...
    
    @property
    @error_handler
    def color(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of color"""
        ...
    
    @color.setter
    @error_handler
    def color(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of style"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def halign(self) -> Optional[Literal["left", "center", "right"]]:
        """Getter of halign"""
        ...
    
    @halign.setter
    @error_handler
    def halign(self, value: Optional[Literal["left", "center", "right"]]) -> None:
        """Setter of halign"""
        ...
    
    @property
    @error_handler
    def valign(self) -> Optional[Literal["bottom", "center", "top"]]:
        """Getter of valign"""
        ...
    
    @valign.setter
    @error_handler
    def valign(self, value: Optional[Literal["bottom", "center", "top"]]) -> None:
        """Setter of valign"""
        ...
    


@dataclasses.dataclass
class ImageStyle:
    """Represents the styling attributes for images in drawlib.

    This dataclass encapsulates various style attributes that can be applied to images,
    including their alignment, outline width, outline style, outline color, fill color,
    and transparency.

    Attributes:
        halign (Optional[Literal['left', 'center', 'right']], optional):
            The horizontal alignment of the image within its bounding box. Can be one of:
            'left', 'center', or 'right'.
        valign (Optional[Literal['bottom', 'center', 'top']], optional):
            The vertical alignment of the image within its bounding box. Can be one of:
            'bottom', 'center', or 'top'.
        lwidth (Optional[float], optional):
            The width of the outline (line) around the image. Default is None (no outline).
        lstyle (Optional[Literal['solid', 'dashed', 'dotted', 'dashdot']], optional):
            The style of the outline (line) around the image. Can be one of:
            'solid', 'dashed', 'dotted', or 'dashdot'. Default is None (no outline).
        lcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the outline (line) around the image in RGB or RGBA format.
            Default is None (no outline).
        fcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The fill color of the image in RGB or RGBA format. Default is None (no fill color).
        alpha (Optional[float], optional):
            The transparency of the image, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque). Default is None (fully opaque).

    Methods:
        copy(self) -> ImageStyle:
            Creates and returns a deep copy of the ImageStyle object.
    """
    halign: Optional[Literal["left", "center", "right"]] = ...
    valign: Optional[Literal["bottom", "center", "top"]] = ...
    lwidth: Optional[float] = ...
    lstyle: Optional[Literal["solid", "dashed", "dotted", "dashdot"]] = ...
    lcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    fcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    alpha: Optional[float] = ...
    @error_handler
    def copy(self) -> ImageStyle:
        """Create and return a deep copy of the ImageStyle object."""
        ...
    
    @error_handler
    def merge(self, style: ImageStyle) -> ImageStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (ImageStyle): The primary style to be merged with this object's style.

        Returns:
            ImageStyle: A new `ImageStyle` instance with merged attributes.

        Example:
            primary_style = ImageStyle(halign='center', lcolor='red')
            secondary_style = ImageStyle(halign=None, lcolor=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have halign='center', lcolor='red', alpha=0.5
        """
        ...
    
    @property
    @error_handler
    def halign(self) -> Optional[Literal["left", "center", "right"]]:
        """Getter of halign"""
        ...
    
    @halign.setter
    @error_handler
    def halign(self, value: Optional[Literal["left", "center", "right"]]) -> None:
        """Setter of halign"""
        ...
    
    @property
    @error_handler
    def valign(self) -> Optional[Literal["bottom", "center", "top"]]:
        """Getter of valign"""
        ...
    
    @valign.setter
    @error_handler
    def valign(self, value: Optional[Literal["bottom", "center", "top"]]) -> None:
        """Setter of valign"""
        ...
    
    @property
    @error_handler
    def lwidth(self) -> Optional[float]:
        """Getter of lwidth"""
        ...
    
    @lwidth.setter
    @error_handler
    def lwidth(self, value: Optional[float]) -> None:
        """Setter of lwidth"""
        ...
    
    @property
    @error_handler
    def lstyle(self) -> Optional[str]:
        """Getter of lstyle"""
        ...
    
    @lstyle.setter
    @error_handler
    def lstyle(self, value: Optional[str]) -> None:
        """Setter of lstyle"""
        ...
    
    @property
    @error_handler
    def lcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of lcolor"""
        ...
    
    @lcolor.setter
    @error_handler
    def lcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of lcolor"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def fcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of fcolor"""
        ...
    
    @fcolor.setter
    @error_handler
    def fcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of fcolor"""
        ...
    


@dataclasses.dataclass
class LineStyle:
    """Represents the styling attributes for lines in drawlib.

    This dataclass encapsulates various style attributes that can be applied to lines,
    including their width, color, transparency, style, arrow head fill, and arrow head scale.

    Attributes:
        width (Optional[float], optional):
            The width of the line. Default is None (no specific width).
        color (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the line in RGB or RGBA format. Default is None (no specific color).
        alpha (Optional[float], optional):
            The transparency of the line, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque). Default is None (fully opaque).
        style (Optional[Literal['solid', 'dashed', 'dotted', 'dashdot']], optional):
            The style of the line. Can be one of: 'solid', 'dashed', 'dotted', or 'dashdot'.
            Default is None (no specific style).
        ahfill (Optional[bool], optional):
            Specifies whether the arrow heads at the ends of the line should be filled (True)
            or not (False). Default is None (no specific fill setting).
        ahscale (Optional[int], optional):
            The scale factor applied to the size of the arrow heads at the ends of the line.
            Default is None (no specific scale factor).

    Methods:
        copy(self) -> LineStyle:
            Creates and returns a deep copy of the LineStyle object.
    """
    width: Optional[float] = ...
    color: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    alpha: Optional[float] = ...
    style: Optional[Literal["solid", "dashed", "dotted", "dashdot"]] = ...
    ahfill: Optional[bool] = ...
    ahscale: Optional[float] = ...
    @error_handler
    def copy(self) -> LineStyle:
        """Create and return a deep copy of the LineStyle object."""
        ...
    
    @error_handler
    def merge(self, style: LineStyle) -> LineStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (LineStyle): The primary style to be merged with this object's style.

        Returns:
            LineStyle: A new `LineStyle` instance with merged attributes.

        Example:
            primary_style = LineStyle(width=2, color='blue')
            secondary_style = LineStyle(width=None, color=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have width=2, color='blue', alpha=0.5
        """
        ...
    
    @property
    @error_handler
    def width(self) -> Optional[float]:
        """Getter of lwidth"""
        ...
    
    @width.setter
    @error_handler
    def width(self, value: Optional[float]) -> None:
        """Setter of lwidth"""
        ...
    
    @property
    @error_handler
    def color(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of color"""
        ...
    
    @color.setter
    @error_handler
    def color(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of color"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def style(self) -> Optional[str]:
        """Getter of lstyle"""
        ...
    
    @style.setter
    @error_handler
    def style(self, value: Optional[str]) -> None:
        """Setter of lstyle"""
        ...
    
    @property
    @error_handler
    def ahscale(self) -> Optional[float]:
        """Getter of arrow head scale"""
        ...
    
    @ahscale.setter
    @error_handler
    def ahscale(self, value: Optional[float]) -> None:
        """Setter of hscale"""
        ...
    
    @property
    @error_handler
    def ahfill(self) -> Optional[bool]:
        """Getter of arrow head fill"""
        ...
    
    @ahfill.setter
    @error_handler
    def ahfill(self, value: Optional[bool]) -> None:
        """Setter of lstyle"""
        ...
    


@dataclasses.dataclass
class ShapeStyle:
    """Represents the styling attributes for shapes in drawlib.

    This dataclass encapsulates various style attributes that can be applied to shapes,
    including horizontal and vertical alignment, transparency, line width, line color,
    line style, and fill color.

    Attributes:
        halign (Optional[Literal['left', 'center', 'right']], optional):
            The horizontal alignment of the shape. Default is None (no specific alignment).
        valign (Optional[Literal['bottom', 'center', 'top']], optional):
            The vertical alignment of the shape. Default is None (no specific alignment).
        alpha (Optional[float], optional):
            The transparency of the shape, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque). Default is None (fully opaque).
        lwidth (Optional[float], optional):
            The width of the outline of the shape. Default is None (no specific width).
        lstyle (Optional[Literal['solid', 'dashed', 'dotted', 'dashdot']], optional):
            The style of the outline of the shape. Can be one of: 'solid', 'dashed', 'dotted',
            or 'dashdot'. Default is None (no specific style).
        lcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the outline of the shape in RGB or RGBA format. Default is None
            (no specific color).
        fcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The fill color of the shape in RGB or RGBA format. Default is None (no specific color).

    Methods:
        copy(self) -> ShapeStyle:
            Creates and returns a deep copy of the ShapeStyle object.
    """
    halign: Optional[Literal["left", "center", "right"]] = ...
    valign: Optional[Literal["bottom", "center", "top"]] = ...
    alpha: Optional[float] = ...
    lwidth: Optional[float] = ...
    lcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    lstyle: Optional[Literal["solid", "dashed", "dotted", "dashdot"]] = ...
    fcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    @error_handler
    def copy(self) -> ShapeStyle:
        """Create and return a deep copy of the ShapeStyle object."""
        ...
    
    @error_handler
    def merge(self, style: ShapeStyle) -> ShapeStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (ShapeStyle): The primary style to be merged with this object's style.

        Returns:
            ShapeStyle: A new `ShapeStyle` instance with merged attributes.

        Example:
            primary_style = ShapeStyle(halign='center', lcolor='red')
            secondary_style = ShapeStyle(halign=None, lcolor=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have halign='center', lcolor='red', alpha=0.5
        """
        ...
    
    @property
    @error_handler
    def halign(self) -> Optional[Literal["left", "center", "right"]]:
        """Getter of halign"""
        ...
    
    @halign.setter
    @error_handler
    def halign(self, value: Optional[Literal["left", "center", "right"]]) -> None:
        """Setter of halign"""
        ...
    
    @property
    @error_handler
    def valign(self) -> Optional[Literal["bottom", "center", "top"]]:
        """Getter of valign"""
        ...
    
    @valign.setter
    @error_handler
    def valign(self, value: Optional[Literal["bottom", "center", "top"]]) -> None:
        """Setter of valign"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def lwidth(self) -> Optional[float]:
        """Getter of lwidth"""
        ...
    
    @lwidth.setter
    @error_handler
    def lwidth(self, value: Optional[float]) -> None:
        """Setter of lwidth"""
        ...
    
    @property
    @error_handler
    def lstyle(self) -> Optional[str]:
        """Getter of lstyle"""
        ...
    
    @lstyle.setter
    @error_handler
    def lstyle(self, value: Optional[str]) -> None:
        """Setter of lstyle"""
        ...
    
    @property
    @error_handler
    def lcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of lcolor"""
        ...
    
    @lcolor.setter
    @error_handler
    def lcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of lcolor"""
        ...
    
    @property
    @error_handler
    def fcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of fcolor"""
        ...
    
    @fcolor.setter
    @error_handler
    def fcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of fcolor"""
        ...
    


@dataclasses.dataclass
class ShapeTextStyle:
    """Represents the text styling attributes for shapes in drawlib.

    This dataclass encapsulates various style attributes that can be applied to text in shapes,
    including transparency, color, size, horizontal and vertical alignment, font type,
    rotation angle, flip status, and xy shift.

    Attributes:
        alpha (Optional[float], optional):
            The transparency of the text, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque). Default is None (fully opaque).
        color (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the text in RGB or RGBA format. Default is None (no specific color).
        size (Union[float, str, None], optional):
            The size of the text. It can be a float indicating the font size in points,
            a string representing relative sizes ('small', 'medium', 'large'), or None
            (default size). Default is None.
        halign (Optional[Literal['left', 'center', 'right']], optional):
            The horizontal alignment of the text. Default is None (no specific alignment).
        valign (Optional[Literal['bottom', 'center', 'top']], optional):
            The vertical alignment of the text. Default is None (no specific alignment).
        font (Union[
            Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese,
            FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode,
            FontFile, None], optional):
            The font type of the text. Default is None (no specific font).
        angle (Optional[float], optional):
            The rotation angle of the text in degrees. Default is None (no rotation).
        flip (Optional[bool], optional):
            Flip the text horizontally if True. Default is None (no flipping).
        xy_shift (Optional[Tuple[float, float]], optional):
            Shift the text horizontally and vertically by the specified amount.
            Default is None (no shift).

    Methods:
        copy(self) -> ShapeTextStyle:
            Creates and returns a deep copy of the ShapeTextStyle object.
    """
    alpha: Optional[float] = ...
    color: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    size: Union[float, str, None] = ...
    halign: Optional[Literal["left", "center", "right"]] = ...
    valign: Optional[Literal["bottom", "center", "top"]] = ...
    font: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,] = ...
    angle: Optional[float] = ...
    flip: Optional[bool] = ...
    xy_shift: Optional[Tuple[float, float]] = ...
    @error_handler
    def copy(self) -> ShapeTextStyle:
        """Create and return a deep copy of the ShapeTextStyle object."""
        ...
    
    @error_handler
    def merge(self, style: ShapeTextStyle) -> ShapeTextStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (ShapeTextStyle): The primary style to be merged with this object's style.

        Returns:
            ShapeTextStyle: A new `ShapeTextStyle` instance with merged attributes.

        Example:
            primary_style = ShapeTextStyle(color='black', size=12)
            secondary_style = ShapeTextStyle(color=None, size=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have color='black', size=12, alpha=0.5
        """
        ...
    
    @property
    @error_handler
    def halign(self) -> Optional[Literal["left", "center", "right"]]:
        """Getter of halign"""
        ...
    
    @halign.setter
    @error_handler
    def halign(self, value: Optional[Literal["left", "center", "right"]]) -> None:
        """Setter of halign"""
        ...
    
    @property
    @error_handler
    def valign(self) -> Optional[Literal["bottom", "center", "top"]]:
        """Getter of valign"""
        ...
    
    @valign.setter
    @error_handler
    def valign(self, value: Optional[Literal["bottom", "center", "top"]]) -> None:
        """Setter of valign"""
        ...
    
    @property
    @error_handler
    def color(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of color"""
        ...
    
    @color.setter
    @error_handler
    def color(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of color"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def size(self) -> Optional[float]:
        """Getter of size"""
        ...
    
    @size.setter
    @error_handler
    def size(self, value: Optional[float]) -> None:
        """Setter of size"""
        ...
    
    @property
    @error_handler
    def font(self) -> Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,]:
        """Getter of font"""
        ...
    
    @font.setter
    @error_handler
    def font(self, value: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,]) -> None:
        """Setter of font"""
        ...
    
    @property
    @error_handler
    def angle(self) -> Optional[float]:
        """Getter of angle"""
        ...
    
    @angle.setter
    @error_handler
    def angle(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def flip(self) -> Optional[bool]:
        """Getter of flip"""
        ...
    
    @flip.setter
    @error_handler
    def flip(self, value: Optional[bool]) -> None:
        """Setter of flip"""
        ...
    
    @property
    @error_handler
    def xy_shift(self) -> Optional[Tuple[float, float]]:
        """Getter of xy_shift"""
        ...
    
    @xy_shift.setter
    @error_handler
    def xy_shift(self, value: Optional[float]) -> None:
        """Setter of xy_shift"""
        ...
    


@dataclasses.dataclass
class TextStyle:
    """Represents the text style attributes for drawlib.

    This dataclass encapsulates various style attributes that can be applied to text,
    including transparency, color, size, horizontal and vertical alignment, font type,
    and background attributes such as background transparency, color, style, and width.

    Attributes:
        alpha (Optional[float], optional):
            The transparency of the text, ranging from 0.0 (fully transparent) to 1.0
            (fully opaque). Default is None (fully opaque).
        color (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the text in RGB or RGBA format. Default is None (no specific color).
        size (Union[float, str, None], optional):
            The size of the text. It can be a float indicating the font size in points,
            a string representing relative sizes ('small', 'medium', 'large'), or None
            (default size). Default is None.
        halign (Optional[Literal['left', 'center', 'right']], optional):
            The horizontal alignment of the text. Default is None (no specific alignment).
        valign (Optional[Literal['bottom', 'center', 'top']], optional):
            The vertical alignment of the text. Default is None (no specific alignment).
        font (Union[
            Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese,
            FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode,
            FontFile, None], optional):
            The font type of the text. Default is None (no specific font).

        # Background attributes
        bgalpha (Optional[float], optional):
            The transparency of the background behind the text, ranging from 0.0
            (fully transparent) to 1.0 (fully opaque). Default is None (fully opaque).
        bglcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The color of the background behind the text in RGB or RGBA format.
            Default is None (no specific color).
        bglstyle (Optional[Literal["solid", "dashed", "dotted", "dashdot"]], optional):
            The style of the background line behind the text. Default is None (no specific style).
        bglwidth (Optional[float], optional):
            The width of the background line behind the text. Default is None (no specific width).
        bgfcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float], None], optional):
            The fill color of the background behind the text in RGB or RGBA format.
            Default is None (no specific color).

    Methods:
        copy(self) -> TextStyle:
            Creates and returns a deep copy of the TextStyle object.
    """
    alpha: Optional[float] = ...
    color: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    size: Union[float, str, None] = ...
    halign: Optional[Literal["left", "center", "right"]] = ...
    valign: Optional[Literal["bottom", "center", "top"]] = ...
    font: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,] = ...
    bgalpha: Optional[float] = ...
    bglcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    bglstyle: Optional[Literal["solid", "dashed", "dotted", "dashdot"]] = ...
    bglwidth: Optional[float] = ...
    bgfcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float], None] = ...
    @error_handler
    def copy(self) -> TextStyle:
        """Create and return a deep copy of the TextStyle object."""
        ...
    
    @error_handler
    def merge(self, style: TextStyle) -> TextStyle:
        """Merge the provided style with this object's style.

        This method takes the given `style` and merges it with the instance's
        style attributes. The `style` parameter is treated as the primary style,
        and any attributes that are `None` in the primary style will be replaced
        with the corresponding attributes from this object's style.

        Args:
            style (TextStyle): The primary style to be merged with this object's style.

        Returns:
            TextStyle: A new `TextStyle` instance with merged attributes.

        Example:
            primary_style = TextStyle(color='black', size=12)
            secondary_style = TextStyle(color=None, size=None, alpha=0.5)
            result_style = secondary_style.merge(primary_style)
            # result_style will have color='black', size=12, alpha=0.5

        """
        ...
    
    @property
    @error_handler
    def halign(self) -> Optional[Literal["left", "center", "right"]]:
        """Getter of halign"""
        ...
    
    @halign.setter
    @error_handler
    def halign(self, value: Optional[Literal["left", "center", "right"]]) -> None:
        """Setter of halign"""
        ...
    
    @property
    @error_handler
    def valign(self) -> Optional[Literal["bottom", "center", "top"]]:
        """Getter of valign"""
        ...
    
    @valign.setter
    @error_handler
    def valign(self, value: Optional[Literal["bottom", "center", "top"]]) -> None:
        """Setter of valign"""
        ...
    
    @property
    @error_handler
    def color(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of color"""
        ...
    
    @color.setter
    @error_handler
    def color(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of color"""
        ...
    
    @property
    @error_handler
    def alpha(self) -> Optional[float]:
        """Getter of alpha"""
        ...
    
    @alpha.setter
    @error_handler
    def alpha(self, value: Optional[float]) -> None:
        """Setter of alpha"""
        ...
    
    @property
    @error_handler
    def size(self) -> Optional[float]:
        """Getter of size"""
        ...
    
    @size.setter
    @error_handler
    def size(self, value: Optional[float]) -> None:
        """Setter of size"""
        ...
    
    @property
    @error_handler
    def font(self) -> Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,]:
        """Getter of font"""
        ...
    
    @font.setter
    @error_handler
    def font(self, value: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile, None,]) -> None:
        """Setter of font"""
        ...
    
    @property
    @error_handler
    def bgalpha(self) -> Optional[float]:
        """Getter of bgalpha"""
        ...
    
    @bgalpha.setter
    @error_handler
    def bgalpha(self, value: Optional[float]) -> None:
        """Setter of bgalpha"""
        ...
    
    @property
    @error_handler
    def bglwidth(self) -> Optional[float]:
        """Getter of bglwidth"""
        ...
    
    @bglwidth.setter
    @error_handler
    def bglwidth(self, value: Optional[float]) -> None:
        """Setter of bglwidth"""
        ...
    
    @property
    @error_handler
    def bglstyle(self) -> Optional[str]:
        """Getter of bglstyle"""
        ...
    
    @bglstyle.setter
    @error_handler
    def bglstyle(self, value: Optional[str]) -> None:
        """Setter of bglstyle"""
        ...
    
    @property
    @error_handler
    def bglcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of bglcolor"""
        ...
    
    @bglcolor.setter
    @error_handler
    def bglcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of bglcolor"""
        ...
    
    @property
    @error_handler
    def bgfcolor(self) -> Union[Tuple[int, int, int], Tuple[int, int, int, float], None]:
        """Getter of bgfcolor"""
        ...
    
    @bgfcolor.setter
    @error_handler
    def bgfcolor(self, value: Union[Tuple[int, int, int], Tuple[int, int, int, float], None]) -> None:
        """Setter of fcolor"""
        ...
    


@dataclasses.dataclass
class ThemeStyles:
    """Represents a collection of style configurations for various shapes and text in a theme.

    This dataclass provides a set of optional style configurations for different graphical
    elements and their associated text, allowing customization of visual representations
    within a theme.
    """
    iconstyle: Optional[IconStyle] = ...
    imagestyle: Optional[ImageStyle] = ...
    linestyle: Optional[LineStyle] = ...
    shapestyle: Optional[ShapeStyle] = ...
    shapetextstyle: Optional[ShapeTextStyle] = ...
    textstyle: Optional[TextStyle] = ...
    arcstyle: Optional[ShapeStyle] = ...
    arctextstyle: Optional[ShapeTextStyle] = ...
    circlestyle: Optional[ShapeStyle] = ...
    circletextstyle: Optional[ShapeTextStyle] = ...
    ellipsestyle: Optional[ShapeStyle] = ...
    ellipsetextstyle: Optional[ShapeTextStyle] = ...
    polygonstyle: Optional[ShapeStyle] = ...
    polygontextstyle: Optional[ShapeTextStyle] = ...
    rectanglestyle: Optional[ShapeStyle] = ...
    rectangletextstyle: Optional[ShapeTextStyle] = ...
    regularpolygonstyle: Optional[ShapeStyle] = ...
    regularpolygontextstyle: Optional[ShapeTextStyle] = ...
    wedgestyle: Optional[ShapeStyle] = ...
    wedgetextstyle: Optional[ShapeTextStyle] = ...
    donutsstyle: Optional[ShapeStyle] = ...
    donutstextstyle: Optional[ShapeTextStyle] = ...
    fanstyle: Optional[ShapeStyle] = ...
    fantextstyle: Optional[ShapeTextStyle] = ...
    arrowstyle: Optional[ShapeStyle] = ...
    arrowtextstyle: Optional[ShapeTextStyle] = ...
    rhombusstyle: Optional[ShapeStyle] = ...
    rhombustextstyle: Optional[ShapeTextStyle] = ...
    parallelogramstyle: Optional[ShapeStyle] = ...
    parallelogramtextstyle: Optional[ShapeTextStyle] = ...
    trapezoidstyle: Optional[ShapeStyle] = ...
    trapezoidtextstyle: Optional[ShapeTextStyle] = ...
    trianglestyle: Optional[ShapeStyle] = ...
    triangletextstyle: Optional[ShapeTextStyle] = ...
    starstyle: Optional[ShapeStyle] = ...
    startextstyle: Optional[ShapeTextStyle] = ...
    chevronstyle: Optional[ShapeStyle] = ...
    chevrontextstyle: Optional[ShapeTextStyle] = ...
    bubblespeechstyle: Optional[ShapeStyle] = ...
    bubblespeechtextstyle: Optional[ShapeTextStyle] = ...


@dataclasses.dataclass
class OfficialThemeStyle:
    """Represents the official style configuration for a theme.

    This dataclass encapsulates various style configurations and color definitions
    for a theme, including default and named styles, theme colors, background color,
    and optional source code font.
    """
    default_style: ThemeStyles
    named_styles: List[Tuple[str, ThemeStyles]]
    theme_colors: List[Tuple[str, Tuple[int, int, int]]]
    backgroundcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float]]
    sourcecodefont: Optional[FontSourceCode]
    ...


