"""
This type stub file was generated by pyright.
"""

from typing import List, Literal, Optional, Tuple, Union
from drawlib.v0_1.private.core.fonts import Font, FontArabic, FontBase, FontChinese, FontFile, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSansSerif, FontSerif, FontSourceCode
from drawlib.v0_1.private.core.model import ThemeStyles
from drawlib.v0_1.private.util import error_handler

"""dtheme implementation module."""
class AllStyleModifier:
    """Utility class to modify styles within a Theme object.

    Attributes:
        _theme (Theme): The Theme object containing style collections.
    """
    def __init__(self, theme: Theme) -> None:
        """Initializes the AllStyleModifier with a Theme object.

        Args:
            theme (Theme): The Theme object to modify.
        """
        ...
    
    @error_handler
    def list(self) -> List[str]:
        """List all style names present in the theme.

        Returns:
            List[str]: A list of style names.
        """
        ...
    
    @error_handler
    def copy(self, from_name: str, to_name: str) -> None:
        """Copy a style from `from_name` to `to_name`.

        Args:
            from_name (str): The name of the style to copy from.
            to_name (str): The name of the style to copy to.

        Raises:
            ValueError: If `from_name` does not exist in the theme.
        """
        ...
    
    @error_handler
    def delete(self, name: str) -> None:
        """Delete a style with the given `name`.

        Args:
            name (str): The name of the style to delete.

        Raises:
            ValueError: If attempting to delete the default style name.
        """
        ...
    
    @error_handler
    def rename(self, from_name: str, to_name: str) -> None:
        """Rename a style from `from_name` to `to_name`.

        Args:
            from_name (str): The current name of the style.
            to_name (str): The new name to assign to the style.

        Raises:
            ValueError: If `from_name` is empty(default style) or does not exist in the theme.
        """
        ...
    
    @error_handler
    def merge(self, theme_styles: ThemeStyles, targets: Optional[List[str]] = ...) -> None:
        """Merge styles from `theme_styles` into corresponding style collections in the theme.

        Args:
            theme_styles (ThemeStyles): The dtheme.ThemeStyles object containing styles to merge.
            targets (Optional[List[str]], optional): List of specific style names to target for merging.

        Notes:
            This method merges styles from `theme_styles` into corresponding style collections
            in the theme object.
        """
        ...
    


class Theme:
    """Drawlib Theme control class.

    This class handles the management and customization of themes within the Drawlib library.
    It provides methods to apply official themes, change default styles, and list available themes.
    """
    ThemeStyles = ThemeStyles
    @error_handler
    def __init__(self) -> None:
        """Initialize the Theme object.

        This constructor initializes all styles and applies the default theme.
        """
        ...
    
    @error_handler
    def change_default_linearrow_fill(self, fill: bool) -> None:
        """Change the default fill setting for line arrows.

        Args:
            fill (bool): A boolean indicating whether to fill line arrows.

        Returns:
            None
        """
        ...
    
    @error_handler
    def change_default_font_size(self, size: float) -> None:
        """Change the default font size for text and shape text.

        Args:
            size (float): A positive float representing the new font size. Zero is not acceptable.

        Returns:
            None
        """
        ...
    
    @error_handler
    def change_default_fonts(self, light_font: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile,], regular_font: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile,], bold_font: Union[Font, FontArabic, FontBase, FontSerif, FontSansSerif, FontChinese, FontJapanese, FontKorean, FontMonoSpace, FontRoboto, FontSourceCode, FontFile,]) -> None:
        """Change the default fonts for light, regular, and bold text styles.

        Args:
            light_font: The font to use for light text styles.
            regular_font: The font to use for regular text styles.
            bold_font: The font to use for bold text styles.

        Returns:
            None
        """
        ...
    
    @staticmethod
    @error_handler
    def list_official_themes() -> List[str]:
        """List all available official themes.

        Returns:
            List[str]: A list of names of official themes.
        """
        ...
    
    @error_handler
    def apply_official_theme(self, name: Literal["default", "essentials", "monochrome",]) -> None:
        """Apply an official theme by name.

        Args:
            name (Literal['default', 'essentials', 'monochrome']): The name of the official theme to apply.

        Raises:
            ValueError: If the provided theme name is not supported.

        Returns:
            None
        """
        ...
    
    @error_handler
    def print_theme_colors(self) -> None:
        """Print the current theme colors.

        Returns:
            None
        """
        ...
    
    @error_handler
    def print_style_table(self, max_columns: int = ...) -> None:
        """Print a table of styles with a specified maximum number of columns.

        Args:
            max_columns (int, optional): The maximum number of columns to display in the style table. Default is 11.

        Returns:
            None
        """
        ...
    
    @error_handler
    def apply_custom_theme(self, default_style: Theme.ThemeStyles, named_styles: Optional[List[Tuple[str, Theme.ThemeStyles,]]] = ..., theme_colors: Optional[List[Tuple[str, Tuple[int, int, int]]]] = ..., backgroundcolor: Union[Tuple[int, int, int], Tuple[int, int, int, float]] = ..., sourcecodefont: Optional[FontSourceCode] = ...) -> None:
        """Apply a custom theme.

        Args:
            default_style (dtheme.ThemeStyles): The default theme styles to be applied.
            named_styles (List[Tuple[str, Theme.ThemeStyles]], optional):
                A list of named theme styles.
                Each tuple contains a name and a `ThemeStyles` object. Defaults to [].
            theme_colors (List[Tuple[str, Union[Tuple[int, int, int], Tuple[int, int, int, float]]]], optional):
                A list of theme colors. Each tuple contains a name and a color
                in the format (R, G, B) or (R, G, B, A). Defaults to [].
            backgroundcolor (Union[Tuple[int, int, int], Tuple[int, int, int, float]], optional):
                The background color in the format (R, G, B) or (R, G, B, A). Defaults to Colors.White.
            sourcecodefont (Optional[FontSourceCode], optional): The source code font.
                Defaults to FontSourceCode.SOURCECODEPRO.

        Raises:
            ValueError: If any of the style or color formats are incorrect.

        Returns:
            None
        """
        ...
    


dtheme = ...
