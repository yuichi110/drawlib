"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Literal, Optional, Tuple, Union
from matplotlib.font_manager import FontProperties
from matplotlib.text import Text
from drawlib.v0_1.private.core.model import IconStyle, ImageStyle, LineStyle, ShapeStyle, ShapeTextStyle, TextStyle

"""Utility module for converting drawlib data to matplotlib data."""
class ColorUtil:
    """A utility class for color conversion operations."""
    @staticmethod
    def get_mplot_rgba(rgb_or_rgba: Union[Tuple[int, int, int], Tuple[int, int, int, float]], alpha: Optional[float] = ...) -> Tuple[float, float, float, float]:
        """Convert 0~255 RGB/RGBA to 0.0 ~ 1.0 RGBA for matplotlib.

        drawlib prefers 0~255 RGB/RGBA.
        matplotlib uses 0.0~1.0 RGB/RGBA.

        This function provides a converter from drawlib format to matplotlib format.
        The alpha channel is handled as follows:

        1. If the `alpha` argument is provided, use it.
        2. If the original data is RGBA, use its alpha value.
        3. Set alpha to 1.0 if not provided.

        Args:
            rgb_or_rgba (Union[Tuple[int, int, int], Tuple[int, int, int, float]]):
                RGB or RGBA color tuple where components are in the range 0 to 255.
                If RGBA, the alpha component should be in the range 0.0 to 1.0.
            alpha (Optional[float]): Optional alpha value to override the input alpha.

        Returns:
            Tuple[float, float, float, float]: Tuple representing matplotlib's RGBA format.
        """
        ...
    
    @staticmethod
    def get_hexrgb(rgb_or_rgba: Union[Tuple[int, int, int], Tuple[int, int, int, float]]) -> str:
        """Convert RGB or RGBA tuple to hexadecimal color code.

        Args:
            rgb_or_rgba (Union[Tuple[int, int, int], Tuple[int, int, int, float]]):
                RGB or RGBA color tuple where components are in the range 0 to 255.
                If RGBA, the alpha component should be in the range 0.0 to 1.0.

        Returns:
            str: Hexadecimal color code in the format "#RRGGBB" or "#RRGGBBAA" (if alpha < 1.0).

        Raises:
            ValueError: If RGB values are out of range (0-255).
        """
        ...
    
    @staticmethod
    def get_rgba_from_hex(hex_color: str) -> Tuple[int, int, int, float]:
        """Convert a hexadecimal color code to RGBA values.

        Args:
            hex_color (str): The hexadecimal color code (e.g., "#FF5733" or "#FFF").

        Returns:
            tuple[int, int, int, float]: A tuple containing the RGBA values (0-255 for R, G, B and 0.0-1.0 for A).

        Raises:
            ValueError: If the hex_color format is invalid.
        """
        ...
    


class IconUtil:
    """A utility class for handling icon styles."""
    @staticmethod
    def format_style(style: Union[IconStyle, str, None], default_icon_style: Optional[str] = ...) -> IconStyle:
        """Format and retrieve an IconStyle object based on input parameters.

        Args:
            style (Union[IconStyle, str, None]):
                The style to format. Can be an IconStyle object, a style name (str),
                or None. If None, the default icon style from dtheme.iconstyles is used.
            default_icon_style (Optional[str]):
                Default style name to use if style is None or a string.

        Returns:
            IconStyle: The formatted IconStyle object.

        Raises:
            ValueError: If the input style parameter is invalid or cannot be formatted.

        Notes:
            - If default_icon_style is provided, it will override dtheme.iconstyles.get().
            - The returned style is a merged result of the input style, dtheme.iconstyles.get(),
              and SYSTEM_DEFAULT_ICON_STYLE.
        """
        ...
    


class ImageUtil:
    """A utility class for handling image styles."""
    @staticmethod
    def format_style(style: Union[ImageStyle, str, None]) -> ImageStyle:
        """Format and retrieve an ImageStyle object based on input parameters.

        Args:
            style (Union[ImageStyle, str, None]):
                The style to format. Can be an ImageStyle object, a style name (str),
                or None. If None, the default image style from dtheme.imagestyles is used.

        Returns:
            ImageStyle: The formatted ImageStyle object.

        Raises:
            ValueError: If the input style parameter is invalid or cannot be formatted.

        Notes:
            - The returned style is a merged result of the input style, dtheme.imagestyles.get(),
              and SYSTEM_DEFAULT_IMAGE_STYLE.
            - If style is a string, it is treated as the name of the style to fetch from dtheme.imagestyles.
            - If style is an ImageStyle object, it will be copied before further processing to avoid
              modifying the original object.
        """
        ...
    


class LineUtil:
    """A utility class for handling line styles and options."""
    @staticmethod
    def format_style(style: Union[LineStyle, str, None]) -> LineStyle:
        """Format and retrieve a LineStyle object based on input parameters.

        Args:
            style (Union[LineStyle, str, None]):
                The style to format. Can be a LineStyle object, a style name (str),
                or None. If None, the default line style from dtheme.linestyles is used.

        Returns:
            LineStyle: The formatted LineStyle object.

        Raises:
            ValueError: If the input style parameter is invalid or cannot be formatted.

        Notes:
            - The returned style is a merged result of the input style, dtheme.linestyles.get(),
              and SYSTEM_DEFAULT_LINE_STYLE.
        """
        ...
    
    @staticmethod
    def get_fancyarrowpatch_options(arrowhead: Literal["", "->", "<-", "<->"], style: LineStyle) -> Dict[str, Any]:
        """Convert drawlib's LineStyle to matplotlib's line options for fancy arrow patches.

        Matplotlib handles line style arguments in its function calls.
        This method converts drawlib's LineStyle into a dictionary suitable for
        matplotlib's function parameters.

        Args:
            arrowhead (Literal["", "->", "<-", "<->"]):
                The arrowhead style to apply. "" for no arrow, "->" for one-way arrow,
                "<-" for opposite one-way arrow, "<->" for two-way arrow.
            style (LineStyle):
                The LineStyle object containing line properties.

        Returns:
            Dict[str, Any]: A dictionary containing matplotlib's line options.

        Notes:
            - Apply the returned options dictionary to matplotlib's function calls,
              e.g., `Line2D(arg1, ..., **options)`, to apply LineStyle's style.
        """
        ...
    


class ShapeUtil:
    """A utility class for handling shape styles and options."""
    @staticmethod
    def format_styles(style: Union[ShapeStyle, str, None], textstyle: Union[ShapeTextStyle, str, None], get_style: Callable, get_textstyle: Callable) -> Tuple[ShapeStyle, ShapeTextStyle]:
        """Format and retrieve ShapeStyle and ShapeTextStyle objects based on input parameters.

        Args:
            style (Union[ShapeStyle, str, None]):
                The style for the shape. Can be a ShapeStyle object, a style name (str),
                or None. If None, the default shape style from get_style() is used.
            textstyle (Union[ShapeStyle, str, None]):
                The style for the shape's text. Can be a ShapeTextStyle object, a style name (str),
                or None. If None, the default shape text style from get_textstyle() is used.
            get_style (Callable):
                A function to retrieve a ShapeStyle object by name or default.
            get_textstyle (Callable):
                A function to retrieve a ShapeTextStyle object by name or default.

        Returns:
            Tuple[ShapeStyle, ShapeTextStyle]: The formatted ShapeStyle and ShapeTextStyle objects.

        Raises:
            ValueError: If the input style parameters are invalid or cannot be formatted.

        Notes:
            - The returned styles are merged results of the input styles, get_style(), get_textstyle(),
              SYSTEM_DEFAULT_SHAPE_STYLE, and SYSTEM_DEFAULT_SHAPE_TEXT_STYLE using corresponding merge functions.
            - If style or textstyle is a string, it is treated as the name of the style to fetch from get_style()
              or get_textstyle().
            - If style or textstyle is a ShapeStyle or ShapeTextStyle object, further processing may be applied
              to it as needed.
        """
        ...
    
    @staticmethod
    def apply_alignment(xy: Tuple[float, float], width: float, height: float, angle: Optional[float], style: ShapeStyle, is_default_center: bool = ...) -> Tuple[Tuple[float, float], ShapeStyle]:
        """Apply alignment adjustments to coordinates based on ShapeStyle alignment settings.

        Args:
            xy (Tuple[float, float]):
                The x, y coordinates to be adjusted.
            width (float):
                The width of the shape.
            height (float):
                The height of the shape.
            angle (Optional[float]):
                The angle of rotation for the shape.
            style (ShapeStyle):
                The ShapeStyle object containing alignment properties.
            is_default_center (bool, optional):
                Flag indicating if default center alignment should be applied.
                Defaults to False.

        Returns:
            Tuple[Tuple[float, float], ShapeStyle]: Adjusted coordinates and updated ShapeStyle object.

        """
        ...
    
    @staticmethod
    def get_shape_text(xy: Tuple[float, float], angle: Optional[float], text: str, style: Optional[ShapeTextStyle] = ...) -> Text:
        """Get text object which is drawn inside shape.

        Few shape objects can have text in its center.
        This function helps creating text object inside shape.
        Specifically, try to align to center of shapes.

        Args:
            xy (Tuple[float, float]):
                The x, y coordinates of the shape's center.
            angle (Optional[float]):
                The angle of rotation for the shape.
            text (str):
                The text content to be displayed.
            style (Optional[ShapeTextStyle], optional):
                The ShapeTextStyle object containing text style properties.
                Defaults to None.

        Returns:
            matplotlib.text.Text: Shape center text object.
        """
        ...
    
    @staticmethod
    def get_shape_options(style: Optional[ShapeStyle] = ..., default_no_line: bool = ...) -> Dict[str, Any]:
        """Convert drawlib's ShapeStyle to matplotlib's patches(shape) options.

        Args:
            style (Optional[ShapeStyle], optional):
                The ShapeStyle object containing shape style properties.
                Defaults to None.
            default_no_line (bool, optional):
                Flag indicating if default no line should be applied.
                Defaults to True.

        Returns:
            Dict[str, Any]: Dictionary of options suitable for matplotlib patches.

        Notes:
            - If style is None and default_no_line is True, returns {"linewidth": 0}.
            - Returns an empty dictionary if style is None.
            - Otherwise, returns a dictionary containing facecolor, edgecolor, linestyle,
              linewidth, and alpha based on the ShapeStyle object.
        """
        ...
    


class TextUtil:
    """A utility class for handling text styles and options."""
    @staticmethod
    def format_style(style: Union[TextStyle, str, None]) -> TextStyle:
        """Format and retrieve TextStyle object based on input parameters.

        Args:
            style (Union[TextStyle, str, None]):
                The style for the text. Can be a TextStyle object, a style name (str),
                or None. If None, the default text style from dtheme.textstyles.get() is used.

        Returns:
            TextStyle: The formatted TextStyle object.

        Raises:
            ValueError: If the input style parameter is invalid or cannot be formatted.

        Notes:
            - The returned style is a merged result of the input style, dtheme.textstyles.get(),
              SYSTEM_DEFAULT_TEXT_STYLE, and using TextStyle's merge function.
            - If style is a string, it is treated as the name of the style to fetch from dtheme.textstyles.get().
            - If style is a TextStyle object, further processing may be applied to it as needed.

        """
        ...
    
    @staticmethod
    def get_text_options(style: Union[TextStyle, ShapeTextStyle, None]) -> Dict[str, Any]:
        """Convert drawlib's TextStyle or ShapeTextStyle to matplotlib's text options.

        Args:
            style (Union[TextStyle, ShapeTextStyle, None]):
                The TextStyle or ShapeTextStyle object containing text style properties.

        Returns:
            Dict[str, Any]: Dictionary of options suitable for matplotlib text handling.

        Notes:
            - If style is None, returns an empty dictionary.
            - Converts color, horizontalalignment, and verticalalignment properties
              from TextStyle or ShapeTextStyle to matplotlib compatible options.
        """
        ...
    
    @staticmethod
    def get_font_properties(style: Union[TextStyle, ShapeTextStyle]) -> Optional[FontProperties]:
        """Create matplotlib's FontProperties object from TextStyle or ShapeTextStyle.

        Args:
            style (Union[TextStyle, ShapeTextStyle, None]):
                The TextStyle or ShapeTextStyle object containing font properties.

        Returns:
            Optional[FontProperties]: FontProperties object or None if style is None.

        Notes:
            - Returns FontProperties object based on TextStyle's font and size properties.
            - Handles default font settings and user-specified fonts.
        """
        ...
    
    @staticmethod
    def get_bbox_dict(style: Optional[TextStyle] = ...) -> Optional[Dict[str, Any]]:
        """Convert drawlib's TextStyle to matplotlib's text background options.

        Args:
            style (Optional[TextStyle]):
                The TextStyle object containing text background style properties.

        Returns:
            Optional[Dict[str, Any]]: Dictionary of options suitable for matplotlib's text background.

        Notes:
            - Returns None if style is None or if all background properties are None.
            - Converts bgfcolor, bglcolor, bglstyle, bglwidth, and bgalpha properties
              from TextStyle to matplotlib compatible bbox options.
        """
        ...
    


