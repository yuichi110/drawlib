"""
This type stub file was generated by pyright.
"""

import PIL.Image
from typing import Final, List, Optional, Tuple, Union
from drawlib.v0_1.private.core.dimage import Dimage
from drawlib.v0_1.private.core.model import LineStyle, ShapeStyle, ShapeTextStyle
from drawlib.v0_1.private.util import error_handler

"""Canvas's base class implementation module."""
class CanvasBase:
    """Base class for Canvas and its features.

    This class is designed for diamond inheritance.

    """
    DEFAULT_WIDTH: Final[int] = ...
    DEFAULT_HEIGHT: Final[int] = ...
    DEFAULT_DPI: Final[int] = ...
    DEFAULT_GRID: Final[bool] = ...
    DEFAULT_GRID_ONLY: Final[bool] = ...
    DEFAULT_GRID_STYLE: Final[LineStyle] = ...
    DEFAULT_GRID_CENTERSTYLE: Final[LineStyle] = ...
    @error_handler
    def __init__(self) -> None:
        """Initialize Canvas instance with default parameters.

        Not only on first initialization, this method is called from `clear()`.
        Variables are updated via `config()`.

        Returns:
            None

        """
        ...
    
    @error_handler
    def clear(self) -> None:
        """Initialize drawlib Canvas state and configuration.

        Initialize drawlib Canvas.
        It will reset parameters set by `config()` and clear all drawing states.

        Returns:
            None

        Note:
            `clear()` does not reset to theme defaults.
            If you want to reset to default theme, call `config(theme="default")` after `clear()`.

        """
        ...
    
    @error_handler
    def config(self, width: Optional[int] = ..., height: Optional[int] = ..., dpi: Optional[int] = ..., background_color: Union[Tuple[int, int, int], Tuple[int, int, int, float], None,] = ..., background_alpha: Optional[float] = ..., grid: Optional[bool] = ..., grid_only: Optional[bool] = ..., grid_style: Optional[LineStyle] = ..., grid_centerstyle: Optional[LineStyle] = ..., grid_xpitch: Optional[int] = ..., grid_ypitch: Optional[int] = ...) -> None:
        """Configure drawlib Canvas parameters.

        Configures drawlib canvas parameters.
        Parameters will be reset when `clear()` method is called.
        This method can be called multiple times to update configuration.

        Args:
            width (Optional[int]): Width of the canvas.
            height (Optional[int]): Height of the canvas.
            dpi (Optional[int]): Output image resolution.
            background_color (Optional[Union[Tuple[int, int, int], Tuple[int, int, int, float]]]):
                Background color.
            background_alpha (Optional[float]): Background alpha (opacity).
            grid (Optional[bool]): Show grid for checking coordinates.
            grid_only (Optional[bool]): Show grid only.
            grid_style (Optional[LineStyle]): Style of grid lines.
            grid_centerstyle (Optional[LineStyle]): Style of center grid lines.
            grid_xpitch (Optional[int]): X-axis grid pitch.
            grid_ypitch (Optional[int]): Y-axis grid pitch.

        Returns:
            None

        Raises:
            RuntimeError: If `config()` is called after drawing, which could disrupt drawing states.

        Note:
            Changing canvas parameters after drawing operations (`shape()`, `rectangle()`, etc.)
            may lead to unexpected behavior and should be avoided.
            Call `config()` again after `clear()` if you wish to reconfigure canvas settings.
        """
        ...
    
    @error_handler
    def shape(self, xy: Tuple[float, float], path_points: List[Union[Tuple[float, float], Tuple[Tuple[float, float], Tuple[float, float]], Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]],]], angle: float = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Optional[ShapeTextStyle] = ..., is_default_center: bool = ...) -> None:
        """Draw basic shape on the canvas.

        Args:
            xy: Starting point of the shape.
            path_points: List of path points including control points for Bezier curves.
            angle (float, optional): Rotation angle of the shape.
            style (Union[ShapeStyle, str, None], optional): Style of the shape.
            text (str, optional): Text to display along with the shape.
            textsize (Optional[float], optional): Size of the text.
            textstyle (Optional[ShapeTextStyle], optional): Style of the text.
            is_default_center (bool, optional): Whether to place (xy) at the center of the shape.

        Raises:
            ValueError: If invalid path points are provided.
        """
        ...
    
    @error_handler
    def rectangle(self, xy: Tuple[float, float], width: float, height: float, r: float = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a rectangle on the canvas.

        Args:
            xy: Bottom-left corner of the rectangle.
            width: Width of the rectangle.
            height: Height of the rectangle.
            r (float, optional): Radius for rounded corners (default is 0.0).
            angle (Union[int, float], optional): Rotation angle of the rectangle.
            style (Union[ShapeStyle, str, None], optional): Style of the rectangle.
            text (str, optional): Text to display within the rectangle.
            textsize (Optional[float], optional): Size of the text.
            textstyle (Union[ShapeTextStyle, str, None], optional): Style of the text.

        Raises:
            ValueError: If invalid path points are provided.

        """
        ...
    
    @error_handler
    def get_image_zoom_original(self) -> float:
        """Get the zoom factor for displaying the original image.

        Returns:
            float: Zoom factor.
        """
        ...
    
    @error_handler
    def get_image_zoom_from_width(self, image: Union[str, PIL.Image.Image, Dimage], width: float) -> float:
        """Get the zoom factor to fit the image width on the canvas.

        Args:
            image (Union[str, PIL.Image.Image, Dimage]): Image data.
            width (float): Target width.

        Returns:
            float: Zoom factor.
        """
        ...
    
    @error_handler
    def get_charwidth_from_fontsize(self, size: float) -> float:
        """Calculate the character width based on the font size.

        This method calculates the width of a character using a given font size.
        The calculation is currently based on a magic number which may need to be
        adjusted for better accuracy in the future.

        Args:
            size (float): The font size for which to calculate the character width.

        Returns:
            float: The calculated character width.

        Notes:
            The `magic_number` used in the calculation is currently set to 460, but
            this is a placeholder and may require a more accurate calculation.

        Todo:
            - Improve the calculation of the `magic_number` for more accurate results.

        """
        ...
    
    @error_handler
    def get_fontsize_from_charwidth(self, width: float) -> float:
        """Calculate the font size based on the character width.

        This method calculates the font size required to achieve a given character width.
        The calculation is currently based on a magic number which may need to be adjusted
        for better accuracy in the future.

        Args:
            width (float): The character width for which to calculate the font size.

        Returns:
            float: The calculated font size.

        Notes:
            The `magic_number` used in the calculation is currently set to 540, but
            this is a placeholder and may require a more accurate calculation.

        Todo:
            - Improve the calculation of the `magic_number` for more accurate results.
        """
        ...
    


