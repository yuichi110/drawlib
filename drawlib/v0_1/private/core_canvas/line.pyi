"""
This type stub file was generated by pyright.
"""

from typing import List, Literal, Optional, Tuple, Union
from drawlib.v0_1.private.core.model import LineStyle
from drawlib.v0_1.private.core_canvas.base import CanvasBase
from drawlib.v0_1.private.util import error_handler

"""Canvas's line feature implementation module."""
class CanvasLineFeature(CanvasBase):
    """A class representing a canvas with line drawing features.

    This class extends CanvasBase and provides methods for drawing various types of lines
    on a canvas, including straight lines, curved lines, and Bezier curves.

    Attributes:
        None
    """
    def __init__(self) -> None:
        """Initialize the CanvasLineFeature object.

        This constructor initializes the CanvasLineFeature object by calling the constructor
        of its superclass CanvasBase.

        Args:
            None

        Returns:
            None
        """
        ...
    
    @error_handler
    def line(self, xy1: Tuple[float, float], xy2: Tuple[float, float], width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw straight line from xy1 to xy2.

        Args:
            xy1 (Tuple[float, float]): Starting point of the line.
            xy2 (Tuple[float, float]): Ending point of the line.
            width (Optional[float]): Optional width of the line.
            arrowhead (Literal["", "->", "<-", "<->"]):
                    Optional arrowhead style ("", "->", "<-", "<->").
            style (Union[LineStyle, str, None]): Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def line_curved(self, xy1: Tuple[float, float], xy2: Tuple[float, float], bend: float, width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw curved line from xy1 to xy2.

        Args:
            xy1: Tuple[float, float]: Starting point of the line.
            xy2: Tuple[float, float]: Ending point of the line.
            bend: float: Additional line length between xy1 and xy2. 0 is straight.
            width: Optional[float]: Optional width of the line.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def line_bezier1(self, xy1: Tuple[float, float], cp: Tuple[float, float], xy2: Tuple[float, float], width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw Bezier line from xy1 to xy2 with 1 control point.

        Args:
            xy1: Tuple[float, float]: Starting point of the line.
            cp: Tuple[float, float]: Control point for the curve.
            xy2: Tuple[float, float]: Ending point of the line.
            width: Optional[float]: Optional width of the line.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def line_bezier2(self, xy1: Tuple[float, float], cp1: Tuple[float, float], cp2: Tuple[float, float], xy2: Tuple[float, float], width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw Bezier line from xy1 to xy2 with 2 control points.

        Args:
            xy1: Tuple[float, float]: Starting point of the line.
            cp1: Tuple[float, float]: First control point for the curve.
            cp2: Tuple[float, float]: Second control point for the curve.
            xy2: Tuple[float, float]: Ending point of the line.
            width: Optional[float]: Optional width of the line.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def lines(self, xys: List[Tuple[float, float]], width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw multiple connected lines.

        Args:
            xys: List[Tuple[float, float]]: List of points defining the lines.
            width: Optional[float]: Optional width of the lines.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def lines_curved(self, xys: List[Tuple[float, float]], r: float, width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw curved lines connecting multiple points.

        Args:
            xys: List[Tuple[float, float]]: List of points defining the lines.
            r: float: Radius of curvature for the lines.
            width: Optional[float]: Optional width of the lines.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    
    @error_handler
    def lines_bezier(self, xy: Tuple[float, float], path_points: List[Union[Tuple[float, float], Tuple[Tuple[float, float], Tuple[float, float]], Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]],]], width: Optional[float] = ..., arrowhead: Literal["", "->", "<-", "<->"] = ..., style: Union[LineStyle, str, None] = ...) -> None:
        """Draw Bezier lines based on given path points.

        Args:
            xy: Tuple[float, float]: Starting point of the line.
            path_points: List of path points and control points.
            width: Optional[float]: Optional width of the lines.
            arrowhead: Literal["", "->", "<-", "<->"]: Optional arrowhead style ("", "->", "<-", "<->").
            style: Union[LineStyle, str, None]: Optional line style.

        Returns:
            None
        """
        ...
    


