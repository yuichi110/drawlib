"""
This type stub file was generated by pyright.
"""

from typing import Optional, Tuple, Union
from drawlib.v0_1.private.core.model import ShapeStyle, ShapeTextStyle
from drawlib.v0_1.private.core_canvas.base import CanvasBase
from drawlib.v0_1.private.util import error_handler

"""Canvas's original shape feature implementation module."""
class CanvasOriginalPolygonFeature(CanvasBase):
    """Canvas's original shape feature implementation module.

    This class provides methods to draw various polygonal shapes such as
    triangles, parallelograms, trapezoids, rhombuses, chevrons, and stars
    on a canvas.
    """
    def __init__(self) -> None:
        """Initializes a CanvasOriginalPolygonFeature object.

        Initializes an instance of CanvasOriginalPolygonFeature by calling the
        constructor of its superclass, CanvasBase.
        """
        ...
    
    @error_handler
    def triangle(self, xy: Tuple[float, float], width: float, height: float, topvertex_x: Optional[float] = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a triangle on the canvas.

        Args:
            xy: Bottom-left coordinates of the triangle.
            width: Width of the triangle's base.
            height: Height of the triangle.
            topvertex_x (optional): X-coordinate of the top vertex from the left side.
                                    Defaults to center if not provided.
            angle (optional): Rotation angle in degrees.
            style (optional): Style of the triangle.
            text (optional): Text to be placed at the center of the triangle.
            textsize (optional): Size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def parallelogram(self, xy: Tuple[float, float], width: float, height: float, corner_angle: Union[int, float], angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a parallelogram on the canvas.

        Args:
            xy: Bottom-left coordinates of the parallelogram.
            width: Width of the parallelogram's base.
            height: Height of the parallelogram.
            corner_angle: Angle of the left bottom corner in degrees.
            angle (optional): Rotation angle in degrees.
            style (optional): Style of the parallelogram.
            text (optional): Text to be placed at the center of the parallelogram.
            textsize (optional): Size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None

        """
        ...
    
    @error_handler
    def trapezoid(self, xy: Tuple[float, float], height: float, bottomedge_width: float, topedge_width: float, topedge_x: Optional[float] = ..., angle: float = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a trapezoid on the canvas.

        Args:
            xy: Bottom-left coordinates of the trapezoid.
            height: Height of the trapezoid.
            bottomedge_width: Width of the bottom edge of the trapezoid.
            topedge_width: Width of the top edge of the trapezoid.
            topedge_x (optional): X-coordinate of the start point of the top edge.
                                  Defaults to center if not provided.
            angle (optional): Rotation angle in degrees.
            style (optional): Style of the trapezoid.
            text (optional): Text to be placed at the center of the trapezoid.
            textsize (optional): Size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None

        """
        ...
    
    @error_handler
    def rhombus(self, xy: Tuple[float, float], width: float, height: float, angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a chevron on the canvas.

        Args:
            xy: Bottom-left coordinates of the chevron.
            width: Width of the bottom of the chevron.
            height: Height of the chevron.
            corner_angle: Angle of the left bottom corner in degrees (0.0 ~ 90.0).
            mirror (optional): If True, makes the vertex appear on the left side.
            angle (optional): Rotation angle in degrees.
            style (optional): Style of the chevron.
            text (optional): Text to be placed at the center of the chevron.
            textsize (optional): Size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def chevron(self, xy: Tuple[float, float], width: float, height: float, corner_angle: float, mirror: bool = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw chevron.

        Vertex is right on default. Provide True for mirror makes left side vertex.

        Args:
            xy: default left bottom.
            width: width of bottom of chevron
            height: height of chevron
            corner_angle: left bottom corner angle. 0.0 ~ 90.0.
            mirror(optional): make vertex left side.
            angle(optional): rotate degree
            style(optional): style of shape.
            text(optional): center text.
            textsize (optional): Size of the text.
            textstyle(optional): style of text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def star(self, xy: Tuple[float, float], num_vertex: int, radius_ext: float, radius_int: float, angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a star on the canvas.

        Args:
            xy: Center coordinates of the star.
            num_vertex: Number of external vertices (3 or more).
            radius_ext: Radius of the external vertices.
            radius_int: Radius of the internal vertices.
            angle (optional): Rotation angle in degrees.
            style (optional): Style of the star.
            text (optional): Text to be placed at the center of the star.
            textsize (optional): Size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None

        Raises:
            ValueError: If the external radius is smaller than the internal radius.
        """
        ...
    


