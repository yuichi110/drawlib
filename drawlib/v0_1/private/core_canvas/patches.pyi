"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Tuple, Union
from drawlib.v0_1.private.core.model import ShapeStyle, ShapeTextStyle
from drawlib.v0_1.private.core_canvas.base import CanvasBase
from drawlib.v0_1.private.util import error_handler

"""Canvas's matplotlib base shape feature implementation module."""
class CanvasPatchesFeature(CanvasBase):
    """A class for drawing various shapes using matplotlib patches on a canvas."""
    def __init__(self) -> None:
        """Initializes a CanvasPatchesFeature object.

        Initializes an instance of CanvasPatchesFeature by calling the constructor
        of its superclass, CanvasBase.
        """
        ...
    
    @error_handler
    def arc(self, xy: Tuple[float, float], width: float, height: float, from_angle: Union[int, float] = ..., to_angle: Union[int, float] = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw an arc on the canvas.

        Args:
            xy: Center of the arc.
            width: Width of the arc.
            height: Height of the arc.
            from_angle (optional): Starting angle of the arc (default is 0.0).
            to_angle (optional): Ending angle of the arc (default is 360.0).
            angle (optional): Rotation angle of the arc.
            style (optional): Style of the arc.
            text (optional): Text shown at the center of the arc.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def circle(self, xy: Tuple[float, float], radius: float, angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a circle on the canvas.

        Args:
            xy: Center of the circle.
            radius: Radius of the circle.
            angle (optional): Rotation angle of the circle.
            style (optional): Style of the circle.
            text (optional): Text shown at the center of the circle.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def ellipse(self, xy: Tuple[float, float], width: float, height: float, angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw an ellipse on the canvas.

        Args:
            xy: Center of the ellipse.
            width: Width of the ellipse.
            height: Height of the ellipse.
            angle (optional): Rotation angle of the ellipse.
            style (optional): Style of the ellipse.
            text (optional): Text shown at the center of the ellipse.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def polygon(self, xys: List[Tuple[float, float]], style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a polygon on the canvas.

        Args:
            xys: List of vertices [(x1, y1), ...(x_n, y_n)].
            style (optional): Style of the polygon.
            text (optional): Text shown at the center of the polygon.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def regularpolygon(self, xy: Tuple[float, float], radius: float, num_vertex: int, angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a regular polygon on the canvas.

        Args:
            xy: Center of the regular polygon.
            radius: Radius of the regular polygon's vertices.
            num_vertex: Number of vertices.
            angle (optional): Rotation angle of the polygon.
            style (optional): Style of the regular polygon.
            text (optional): Text shown at the center of the regular polygon.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def wedge(self, xy: Tuple[float, float], radius: float, width: Optional[float] = ..., from_angle: float = ..., to_angle: float = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a wedge on the canvas.

        Args:
            xy: Center of the wedge.
            radius: Radius of the wedge.
            width (optional): Length from outer to inner circumference.
                              Default is same as radius.
            from_angle (optional): Starting angle of the wedge (default is 0).
            to_angle (optional): Ending angle of the wedge (default is 360).
            angle (optional): Rotation angle of the wedge.
            style (optional): Style of the wedge.
            text (optional): Text shown at the center of the wedge.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def donuts(self, xy: Tuple[float, float], radius: float, width: Optional[float] = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a donut shape on the canvas.

        Args:
            xy: Center of the donut.
            radius: Radius of the donut.
            width (optional): Width of the donut ring (default is None).
            angle (optional): Rotation angle of the donut.
            style (optional): Style of the donut.
            text (optional): Text shown at the center of the donut.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    
    @error_handler
    def fan(self, xy: Tuple[float, float], radius: float, from_angle: float = ..., to_angle: float = ..., angle: Union[int, float] = ..., style: Union[ShapeStyle, str, None] = ..., text: str = ..., textsize: Optional[float] = ..., textstyle: Union[ShapeTextStyle, str, None] = ...) -> None:
        """Draw a fan shape on the canvas.

        Args:
            xy: Center of the fan.
            radius: Radius of the fan.
            from_angle (optional): Starting angle of the fan (default is 0).
            to_angle (optional): Ending angle of the fan (default is 180).
            angle (optional): Rotation angle of the fan.
            style (optional): Style of the fan.
            text (optional): Text shown at the center of the fan.
            textsize (optional): Font size of the text.
            textstyle (optional): Style of the text.

        Returns:
            None
        """
        ...
    


