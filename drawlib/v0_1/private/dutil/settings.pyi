"""
This type stub file was generated by pyright.
"""

import sys
import typing

"""dutil_settings implementation module."""
__ARG_QUIET = ...
__ARG_DEBUG = ...
__ARG_DEVDEBUG = ...
__ARG_SUPPRESS_WARNING = ...
class DrawlibSettings:
    """Class for managing drawlib settings.

    This class should not be used directly. Use its singleton instance ``dsettings`` instead.
    """
    def __init__(self) -> None:
        """
        Initialize DrawlibSettings.

        This class holds logging modes which determine error handling methods.

        """
        ...
    
    def get_logging_mode(self) -> typing.Literal["normal", "quiet", "verbose", "developer",]:
        """
        Get the current logging mode.

        Returns the current logging mode, which can be one of the following:
        * "quiet": Only show error log. Logging level CRITICAL.
        * "normal": Normal logging. Logging level INFO.
        * "verbose": Show detailed logging. Logging level DEBUG.
        * "developer": Verbose + disable error handling. Logging level DEBUG.

        Returns:
            str: Current logging mode.
        """
        ...
    
    def set_logging_mode(self, mode: typing.Literal["normal", "quiet", "verbose", "debug", "developer"]) -> None:
        """
        Set the logging mode.

        * "quiet" sets logging level to CRITICAL.
        * "normal" sets logging level to INFO.
        * "verbose" sets logging level to DEBUG.
        * "debug" sets logging level to DEBUG.
        * "developer" sets logging level to DEBUG.

        Setting "verbose" and "debug" enables debug mode.
        Setting "developer" enables debug mode and devdebug mode.
        Stacktrace is shown when errors occur in debug mode.
        Error handling is disabled in devdebug mode.

        Args:
            mode: One of "normal", "quiet", "verbose", "debug", "developer".

        Returns:
            None

        Note:
            If an unsupported mode string is selected, the program will call ``sys.exit(1)``.
        """
        ...
    
    def get_suppress_warning(self) -> bool:
        """
        Get whether suppressing warnings is enabled.

        Matplot warnings are shown when it detects small troubles,
        such as drawing non-ASCII text without specifying a font.
        If suppress warnings is enabled, these warnings will be suppressed.

        Returns:
            bool: Whether suppressing warnings is enabled.
        """
        ...
    
    def set_suppress_warning(self, enable: bool) -> None:
        """
        Enable or disable suppressing warnings.

        Matplot warnings are shown when it detects small troubles,
        such as drawing non-ASCII text without specifying a font.
        If suppress warnings is enabled, these warnings will be suppressed.

        Args:
            enable: True to suppress warnings, False otherwise.

        Returns:
            None
        """
        ...
    
    def is_debug_mode(self) -> bool:
        """
        Check if debug mode is enabled.

        In debug mode, stacktraces are shown when errors occur.
        Debug mode can be set using ``set_logging_mode()``.
        Setting "verbose" or "developer" enables debug mode.

        Returns:
            bool: Whether debug mode is enabled.
        """
        ...
    
    def is_developer_debug_mode(self) -> bool:
        """
        Check if developer debug mode is enabled.

        In developer debug mode, error handling is disabled, which is useful for
        development and testing. Developer debug mode can be set using
        ``set_logging_mode()``. Setting "developer" enables developer debug mode.
        When running pytest, developer debug mode is automatically enabled.

        Returns:
            bool: Whether developer debug mode is enabled.
        """
        ...
    


dutil_settings = ...
if __ARG_QUIET in sys.argv:
    ...
if __ARG_DEBUG in sys.argv:
    ...
if __ARG_DEVDEBUG in sys.argv:
    ...
if __ARG_SUPPRESS_WARNING in sys.argv:
    ...
