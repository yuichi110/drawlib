"""
This type stub file was generated by pyright.
"""

from typing import List, Tuple, Union

"""Validate coordinate data."""
def validate_halign(name: str, value: str) -> None:
    """Validate horizontal alignment value.

    Args:
        name (str): Name of the argument or attribute being validated.
        value (str): Horizontal alignment value to validate.

    Raises:
        ValueError: If value is not one of ["left", "center", "right"].

    """
    ...

def validate_valign(name: str, value: str) -> None:
    """Validate vertical alignment value.

    Args:
        name (str): Name of the argument or attribute being validated.
        value (str): Vertical alignment value to validate.

    Raises:
        ValueError: If value is not one of ["bottom", "center", "top"].

    """
    ...

def validate_xy(arg_name: str, value: Tuple[float, float]) -> None:
    """Validate xy coordinate tuple.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (Tuple[float, float]): Coordinate tuple to validate.

    Raises:
        ValueError: If value is not a tuple of length 2 containing floats or integers.

    """
    ...

def validate_xys(arg_name: str, value: List[Tuple[float, float]]) -> None:
    """Validate list of xy coordinate tuples.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (List[Tuple[float, float]]): List of coordinate tuples to validate.

    Raises:
        ValueError: If value is not a list of tuples, or if any tuple does not contain exactly two floats or integers.

    """
    ...

def validate_path_points(arg_name: str, value: List[Union[Tuple[float, float], Tuple[Tuple[float, float], Tuple[float, float]], Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]],]]) -> None:
    """Validate path points for complex shapes.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value: (
            List[Tuple[float, float] |
                Tuple[Tuple[float, float], Tuple[float, float]] |
                Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float]]
            ]):
            List of path points to validate.

    Raises:
        ValueError: If value is not a list of tuples conforming to specified formats.

    """
    ...

def validate_angle(arg_name: str, value: Union[int, float]) -> None:
    """Validate angle value.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (Union[int, float]): Angle value to validate.

    Raises:
        ValueError: If value is not an int or float within the range [0, 360].

    """
    ...

def validate_angle_max90(arg_name: str, value: Union[int, float]) -> None:
    """Validate angle value limited to 0~90 degrees.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (Union[int, float]): Angle value to validate.

    Raises:
        ValueError: If value is not an int or float within the range [0, 90].

    """
    ...

