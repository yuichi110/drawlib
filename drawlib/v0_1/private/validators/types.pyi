"""
This type stub file was generated by pyright.
"""

from typing import Union

"""Validate primitive data types."""
def validate_bool(arg_name: str, value: bool) -> None:
    """Validate boolean value.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (bool): Boolean value to validate.

    Raises:
        ValueError: If value is not a boolean.

    """
    ...

def validate_plus_int(arg_name: str, value: int, is_0_ok: bool = ...) -> None:
    """Validate integer value that is greater than or equal to zero.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (int): Integer value to validate.
        is_0_ok (bool, optional): Whether zero is an acceptable value (default is True).

    Raises:
        ValueError: If value is not an integer or does not meet the specified conditions.

    """
    ...

def validate_plus_float(arg_name: str, value: Union[int, float], is_0_ok: bool = ...) -> None:
    """
    Validate float or integer value that is greater than or equal to zero.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (Union[int, float]): Float or integer value to validate.
        is_0_ok (bool, optional): Whether zero is an acceptable value (default is True).

    Raises:
        ValueError: If value is not a float or integer, or does not meet the specified conditions.

    """
    ...

def validate_float_0_to_1(name: str, value: int) -> None:
    """Validate float or integer value that is between 0.0 and 1.0.

    Args:
        name (str): Name of the argument or attribute being validated.
        value (int): Float or integer value to validate.

    Raises:
        ValueError: If value is not a float or integer, or does not meet the specified range conditions.

    """
    ...

def validate_plusminus_float_or_none(arg_name: str, value: Union[int, float, None]) -> None:
    """Validate integer or float value, or None.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (Union[int, float, None]): Integer, float, or None value to validate.

    Raises:
        ValueError: If value is not an integer, float, or None.

    """
    ...

def validate_str(arg_name: str, value: str) -> None:
    """Validate string value.

    Args:
        arg_name (str): Name of the argument or attribute being validated.
        value (str): String value to validate.

    Raises:
        ValueError: If value is not a string.

    """
    ...

